plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7' // Spring Boot 호환 버전
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'one.dfy.bily'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache' /*토큰 캐싱 - 선택 사항*/
/*    implementation 'org.springframework.boot:spring-boot-starter-security'*/
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.6' // nimbus-jose-jwt 라이브러리 추가
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-gson:0.11.5'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1' // JAXB Runtime
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.691'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'// AWS S3 연동
    implementation 'org.springframework.boot:spring-boot-starter-websocket'// websocket 의존성 주입
    implementation 'org.springframework.boot:spring-boot-starter-mail' // SMTP 구현
    implementation 'com.sun.mail:jakarta.mail:2.0.1' // 최신 SMTP 지원 라이브러리
    implementation 'mysql:mysql-connector-java:8.0.29'  // Use the latest version available
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'  /* Log4JDBC */
    // Springdoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0' // 존재하는 최신 버전

    implementation 'io.swagger.core.v3:swagger-core:2.2.14'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.14'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2' // 최신 버전 확인 후 사용
}

// React 빌드 작업
/*tasks.register('buildReactApp') {
    group = "build"
    description = "React 애플리케이션 빌드 및 Spring Boot 정적 리소스(/backend) 경로로 복사"
    doLast {
        // React 프로젝트 경로 설정
        def reactDir = file("${projectDir}/frontend") // React 프로젝트 폴더 (원래는 backend → frontend로 수정)
        def buildDir = file("${reactDir}/build") // React 빌드 출력물 디렉터리
        def outputDir = file("${projectDir}/src/main/resources/static/backend") // React 파일이 복사될 최종 경로

        // React 앱 빌드 실행 (npm install → npm run build)
        try {
            exec {
                workingDir reactDir
                commandLine 'npm', 'install'
            }
            exec {
                workingDir reactDir
                commandLine 'npm', 'run', 'build'
            }
        } catch (Exception e) {
            throw new GradleException("React 빌드 실패: ${e.message}")
        }

        // 기존 정적 리소스 디렉터리 삭제
        if (outputDir.exists()) {
            project.delete(fileTree(outputDir))
        }

        // React 빌드 파일 복사
        project.copy {
            from buildDir
            into outputDir
        }

        println "React 빌드 완료. 정적 리소스가 복사되었습니다: ${outputDir.absolutePath}"
    }
}

// processResources 태스크: React 빌드 결과물 포함
tasks.processResources {
    dependsOn 'buildReactApp' // React 빌드 후 포함
}

// Spring Boot 빌드 전에 React 빌드 실행
tasks.named('build') {
    dependsOn 'buildReactApp'
}*/
